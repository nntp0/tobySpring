관심사의 분리
리팩토링; 메소드 추출
템플릿 메소드 패턴
팩토리 메소드 패턴
개방 폐쇄 원칙 (OCP)
객체지향 설계 원칙 (SOLID);
	SRP(The Single Responsibility Principle): 단일책임원칙
	OCP(The Open Closed Principle): 개방 폐쇄 원칙
	LSP(The Liskov Substitution Principle): 리스코프 치환 원칙
	ISP(The Interface Segregation Principle): 인터페이스 분리 원칙
	DIP(The Dependency Inversion Principle): 의존관계 역전 원칙

높은 응집도와 낮은 결합도
전략 패턴
제어 역전
팩토리 Factory
라이브러리 vs 프레임워크
빈(bean): 스프링(Spring)이 제어권을 가지고 직접 만들고 관계를 부여하는 오브젝트
빈 팩토리: 빈의 생성과 관계 형성을 담당하는 IoC 객체
애플리케이션 컨텍스트
설정 정보/설정 메타정보
컨테이너/IoC 컨테이너
동일성/동등성
싱글톤 레지스트리 vs 싱글톤 패턴
서비스 오브젝트
싱글톤의 단점
	상속 불가능
	테스트가 힘듬
	JVM이 여러개인경우 1개만 생성되는 것이 아님
	전역상태는 위험함
	
목 오브젝트
빈의 스코프; 대부분의 빈은 싱글톤 스코프, 하지만 경우에 따라 프로토타입, 요청, 세션 스코프등이 존재한다.

의존관계주입
의존관계?
의존한다는 것은 의존대상이 변화하면 의존체에 영향을 미친다는 것.

의존 오브젝트; 의존체가 실제 사용할 대상인 오브젝트
의존관계 주입의 3가지 조건
	클래스 모델이나 코드에는 의존 관계가 드러나지 않는다.
	런타임 시점의 의존관계는 컨테이너나 팩토리같은 제 3의 존재가 결정.
	의존관계는 레퍼런스를 외부에서 주입해줌으로써 생성.

IoC/DI 컨테이너
의존관계 검색

생성자뿐만 아니라 Setter, Normal Method를 이용한 의존성 주입 가능

DI Configuration 생성방법; 자바 클래스, XML
<beans>를 루트 엘리먼트로 <bean> 자식으로 가질 수 있음

JUnit: Testing Framework;
Requirements: public & @Test 
테스트 작성 규칙: 실패를 먼저 고려
	1. 상황 발생 조건
	2. 상황 발생 행위
	3. 상황 발생 결과
	
@Before -> @Test -> @After
픽스처

침투적기술 비침투적기술
학습테스트(Learning Test)

템플릿 메소드 패턴
익명 내부 클래스
템플릿/콜백패턴

예외의 종류;
	java.lang.Error: 시스템, 하드웨어적인 문제(소프트웨어적으로 못잡음)
	java.lang.Exception; checked, unchecked: checked는 의무적으로 잡아줘야함(아니면 컴파일 안됨)
	java.lang.RuntimeException: 정말 예기치 못한 예외들 (널포인터 등)
	
예외처리 방법
	예외 복구: 예외로 인해 정상적인 상황이 불가능할 경우, 다른 시나리오를 제시하도록 만드는 것
	예외 회피: 현 클래스에서 담당하는 것이 아니라, 외부 클래스에서 처리하도록 하는 것
	예외 전환: 발생한 예외에 따라 다른 예외로 전환하여 던지는 것 (예외의 발생 사유가 모호할 때, 분명하게 만들기 위해)	
		중첩 예외: 예외의 정보를 복합적으로 담아냄
		예외 포장: 예외를 다른 정보로 담아서 버림
		
낙관적인 락킹 (Optimistic locking)

JDBC Template
	Local transaction, Global Transaction
	JTA는 Global Transaction을 지원하기 위해 구현된 API
	=> 둘 이상의 DB와 소통하는 Transaction을 다루기 위해서 Global Transaction기능이 요구됨
	
서비스 추상화: 하려는 기능은 비슷하지만, 각각의 구현방식이 다른 여러 API들을 추상적으로 담아내는 방법
	JDBC도 서비스 추상화의 일종, SQL을 이용한 DB 소통방식이지만, DB별로 연결방식이 다르다. 이를 추상화한 것이 JDBC
	
추상화 분리방식
	수평, 수직 계층구조
	
단일 책임 원칙
	장점: 변경이 필요할 때, 수정해야하는 대상이 명확해진다.
	
테스트 더블
	테스트 스텁
	
목 오브젝트: 스텁처럼 테스트 오브젝트가 정상적으로 실행되도록 도와주고 커뮤니케이션 내용을 저장해 결과를 검증하는 데 활용

정의하기나름;
	단위 테스트: 테스트 대상 클래스를 목 오브젝트 등의 테스트 대역을 이용해 의존 오브젝트나 외부의 리소스를 사용하지 않도록 고립시켜서 테스트하는 것
	통합 테스트: 테스트 대상 클래스를 두 개 이상의, 성격이나 계층이 다른 오브젝트가 연동하도록 만들어 테스트하는 것, 또는 외부의 DB나 파일, 서비스 등의 리소스가 참여하는 테스트
	
목 오브젝트 프레임워크

Mockito Framework